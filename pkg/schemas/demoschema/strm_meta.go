// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     demo.avsc
 */
package demoschema

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type StrmMeta struct {
	EventContractRef string `json:"eventContractRef"`

	Nonce *UnionNullInt `json:"nonce"`

	Timestamp *UnionNullLong `json:"timestamp"`

	KeyLink *UnionNullString `json:"keyLink"`

	BillingId *UnionNullString `json:"billingId"`

	ConsentLevels []int32 `json:"consentLevels"`
}

const StrmMetaAvroCRC64Fingerprint = "\xa4\xfa\x89!\x1fD\xc4\x1b"

func NewStrmMeta() *StrmMeta {
	return &StrmMeta{}
}

func DeserializeStrmMeta(r io.Reader) (*StrmMeta, error) {
	t := NewStrmMeta()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeStrmMetaFromSchema(r io.Reader, schema string) (*StrmMeta, error) {
	t := NewStrmMeta()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeStrmMeta(r *StrmMeta, w io.Writer) error {
	var err error
	err = vm.WriteString(r.EventContractRef, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Nonce, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.KeyLink, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.BillingId, w)
	if err != nil {
		return err
	}
	err = writeArrayInt(r.ConsentLevels, w)
	if err != nil {
		return err
	}
	return err
}

func (r *StrmMeta) Serialize(w io.Writer) error {
	return writeStrmMeta(r, w)
}

func (r *StrmMeta) Schema() string {
	return "{\"fields\":[{\"name\":\"eventContractRef\",\"type\":\"string\"},{\"default\":null,\"name\":\"nonce\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"logicalType\":\"date\",\"name\":\"timestamp\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"keyLink\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"billingId\",\"type\":[\"null\",\"string\"]},{\"name\":\"consentLevels\",\"type\":{\"items\":\"int\",\"type\":\"array\"}}],\"name\":\"io.strmprivacy.schemas.demo.v1.StrmMeta\",\"type\":\"record\"}"
}

func (r *StrmMeta) SchemaName() string {
	return "io.strmprivacy.schemas.demo.v1.StrmMeta"
}

func (_ *StrmMeta) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *StrmMeta) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *StrmMeta) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *StrmMeta) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *StrmMeta) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *StrmMeta) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *StrmMeta) SetString(v string)   { panic("Unsupported operation") }
func (_ *StrmMeta) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StrmMeta) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.EventContractRef}
	case 1:
		r.Nonce = NewUnionNullInt()

		return r.Nonce
	case 2:
		r.Timestamp = NewUnionNullLong()

		return r.Timestamp
	case 3:
		r.KeyLink = NewUnionNullString()

		return r.KeyLink
	case 4:
		r.BillingId = NewUnionNullString()

		return r.BillingId
	case 5:
		r.ConsentLevels = make([]int32, 0)

		return &ArrayIntWrapper{Target: &r.ConsentLevels}
	}
	panic("Unknown field index")
}

func (r *StrmMeta) SetDefault(i int) {
	switch i {
	case 1:
		r.Nonce = nil
		return
	case 2:
		r.Timestamp = nil
		return
	case 3:
		r.KeyLink = nil
		return
	case 4:
		r.BillingId = nil
		return
	}
	panic("Unknown field index")
}

func (r *StrmMeta) NullField(i int) {
	switch i {
	case 1:
		r.Nonce = nil
		return
	case 2:
		r.Timestamp = nil
		return
	case 3:
		r.KeyLink = nil
		return
	case 4:
		r.BillingId = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *StrmMeta) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *StrmMeta) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *StrmMeta) Finalize()                        {}

func (_ *StrmMeta) AvroCRC64Fingerprint() []byte {
	return []byte(StrmMetaAvroCRC64Fingerprint)
}
