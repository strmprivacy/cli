// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     clickstream.avsc
 */
package clickstream

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type ClickstreamEvent struct {
	StrmMeta *StrmMeta `json:"strmMeta"`

	ProducerSessionId string `json:"producerSessionId"`

	Url string `json:"url"`

	EventType string `json:"eventType"`

	Referrer string `json:"referrer"`

	UserAgent string `json:"userAgent"`

	Conversion int32 `json:"conversion"`

	Customer *Customer `json:"customer"`

	AbTests []string `json:"abTests"`
}

const ClickstreamEventAvroCRC64Fingerprint = "\xbd2\\\xe8\x19\xe0]\xf8"

func NewClickstreamEvent() *ClickstreamEvent {
	return &ClickstreamEvent{}
}

func DeserializeClickstreamEvent(r io.Reader) (*ClickstreamEvent, error) {
	t := NewClickstreamEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeClickstreamEventFromSchema(r io.Reader, schema string) (*ClickstreamEvent, error) {
	t := NewClickstreamEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeClickstreamEvent(r *ClickstreamEvent, w io.Writer) error {
	var err error
	err = writeStrmMeta(r.StrmMeta, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ProducerSessionId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Url, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.EventType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Referrer, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.UserAgent, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Conversion, w)
	if err != nil {
		return err
	}
	err = writeCustomer(r.Customer, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.AbTests, w)
	if err != nil {
		return err
	}
	return err
}

func (r *ClickstreamEvent) Serialize(w io.Writer) error {
	return writeClickstreamEvent(r, w)
}

func (r *ClickstreamEvent) Schema() string {
	return "{\"fields\":[{\"name\":\"strmMeta\",\"type\":{\"fields\":[{\"name\":\"schemaId\",\"type\":\"string\"},{\"name\":\"nonce\",\"type\":\"int\"},{\"logicalType\":\"date\",\"name\":\"timestamp\",\"type\":\"long\"},{\"default\":null,\"name\":\"keyLink\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"billingId\",\"type\":[\"null\",\"string\"]},{\"name\":\"consentLevels\",\"type\":{\"items\":\"int\",\"type\":\"array\"}}],\"name\":\"StrmMeta\",\"type\":\"record\"}},{\"name\":\"producerSessionId\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"},{\"name\":\"userAgent\",\"type\":\"string\"},{\"name\":\"conversion\",\"type\":\"int\"},{\"name\":\"customer\",\"type\":{\"fields\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"Customer\",\"type\":\"record\"}},{\"name\":\"abTests\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"io.streammachine.schemas.strmcatalog.clickstream.ClickstreamEvent\",\"strmSchemaId\":\"clickstream\",\"type\":\"record\"}"
}

func (r *ClickstreamEvent) SchemaName() string {
	return "io.streammachine.schemas.strmcatalog.clickstream.ClickstreamEvent"
}

func (_ *ClickstreamEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ *ClickstreamEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ClickstreamEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.StrmMeta = NewStrmMeta()

		return r.StrmMeta
	case 1:
		return &types.String{Target: &r.ProducerSessionId}
	case 2:
		return &types.String{Target: &r.Url}
	case 3:
		return &types.String{Target: &r.EventType}
	case 4:
		return &types.String{Target: &r.Referrer}
	case 5:
		return &types.String{Target: &r.UserAgent}
	case 6:
		return &types.Int{Target: &r.Conversion}
	case 7:
		r.Customer = NewCustomer()

		return r.Customer
	case 8:
		r.AbTests = make([]string, 0)

		return &ArrayStringWrapper{Target: &r.AbTests}
	}
	panic("Unknown field index")
}

func (r *ClickstreamEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ClickstreamEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *ClickstreamEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ClickstreamEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *ClickstreamEvent) Finalize()                        {}

func (_ *ClickstreamEvent) AvroCRC64Fingerprint() []byte {
	return []byte(ClickstreamEventAvroCRC64Fingerprint)
}
